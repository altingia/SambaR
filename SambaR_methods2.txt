# This file contains an overview of the commands executed by the SambaR pipeline which call functions of other packages.
 
##### IMPORT DATA #####
mygenlight <<- read.PLINK((paste(inputprefix,'raw',sep='.',collapse = NULL)),parallel=FALSE)
##### FINDSTRUCTURE #####
### correspondence analyses:
mysambar$res.ca <<- CA(mydf,ncp=5,graph=FALSE)
mysambar$res.ca <<- dudi.coa(mydf,scannf=FALSE,nf=5)
### PCOA analyses:
neimatrix <- stamppNeisD(mygenlighttemp[indstemp$filter,snps$filter],pop=FALSE)
p <- pcoa(neimatrix, correction='none', rn=NULL)
hammingmatrix<- bitwise.dist(mygenlight[indselection,snpselection],mat=TRUE)
p <- pcoa(hammingmatrix, correction='none', rn=NULL)
calcpi(pi_per_pop=FALSE,myinput=mygenlight,indselection=inds$filter,snpselection=snps$filter,popnames=mysambar$populations,corrected=TRUE)
pidf<- mysambar$tajdlist_meta[[1]]
pimatrix<- pidf2matrix(pidf=mysambar$tajdlist_meta[[1]],myinds=inds$nr[inds$filter])
p <- pcoa(pimatrix, correction='none', rn=NULL)
### PCA analyses (SNPrelate):
snpgdsCreateGeno('my.gds',snpfirstdim=FALSE,genmat=mymatrix,sample.id=inds$name[indsfilter],snp.id=snps$name[snpsfilter],snp.chromosome=snps$chr[snpsfilter],snp.position = snps$position[snpsfilter])
genofile <- snpgdsOpen('my.gds')
pca <- snpgdsPCA(genofile)
sample.id <- read.gdsn(index.gdsn(genofile, 'sample.id'))
snpgdsClose(genofile)
### Multi-dimensional scaling (MDS) analyses:
myfit <- isoMDS(d,k=ndim)
myfit <- cmdscale(d,eig=FALSE,k=ndim) 
### DAPC analyses:
mygeno<- mygenlight[inds$filter,snps$filter]
mymatrixtemp<- mymatrixtemp[order(mypopnames),]
mygeno<- as.genind(mymatrixtemp)
mygrp <- find.clusters(mygeno,max.n.clust=20,n.pca=mynpca,n.clust=i)
dapc.out <- dapc(mygeno,pop=mygrp$grp,n.pca=mynpca,n.da=20) 
### LEA admixture analyses:
LEA_input<- ped2geno('LEAinput.ped','LEAinput.geno')
obj.snmf<- snmf('LEAinput.geno', K = ndemes, alpha = 100, project = 'new')
qmatrix <- Q(obj.snmf, K = ndemes)
remove.snmfProject('LEAinput.snmfProject')
unlink('LEAinput.snmf', recursive=TRUE)
##### CALCDISTANCE #####
### Fst analyses:
myfstout<- stamppFst(tempgenlight, nboots = n_boots, percent = 95, nclusters = 1)
##### SELECTION ANALYSES #####
### FstHet:
genepopfile <- list.files(pattern = 'genepop')
gpop<- my.read.genepop(genepopfile)
fsthetout<- fhetboot(gpop3,fst.choice=fstmethod,alpha=my_sign_level,nreps=reps)
### PCadapt:
myinput<- paste(my_dataset,'filter2.miss0.letter.ped',sep='.')
x<- read.pcadapt(myinput,type='ped')
z<- pcadapt(x,K=npops)
padj <- p.adjust(z$pvalues,method=mycorrection)
### OutFLANK:
mymatrix<- as.matrix(mygenlight[indselection,snps$filter2])
outflankinput<- MakeDiploidFSTMat(SNPmat=mymatrix,locusNames=myloci,popNames=popcolumn[indselection])
mymean<- mean(outflankinput$FSTNoCorr,na.rm=TRUE)
myrate<- 1/mymean
myvalue<- qexp(right_trim,myrate)
prunevector<- outflankinput$FSTNoCorr<myvalue&!is.na(outflankinput$FSTNoCorr)&is.finite(outflankinput$FSTNoCorr)
nrsamples<- length(inds$pop[indselection])
npops<- length(as.vector(unique(inds$pop[indselection])))
myfstmax<- round(max(outflankinput$FSTNoCorr[prunevector],na.rm=TRUE),3)
out_trim <- OutFLANK(FstDataFrame=outflankinput[prunevector,],NumberOfSamples=npops,qthreshold=0.05,Hmin = 0.1)
P1 <- pOutlierFinderChiSqNoCorr(outflankinput,Fstbar = out_trim$FSTNoCorrbar,dfInferred = out_trim$dfInferred, qthreshold = 0.05, Hmin=0.1)
